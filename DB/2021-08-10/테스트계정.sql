-- 회원정보 저장용 테이블
-- 어떤 정보를 저장할지 -> 이름, 아이디, 나이, 비밀번호, 이메일, 생년월일, 주소, 전화번호

/*
저장할 정보별 컬럼이름, 자료형
CHAR        :   고정길이 문자열 -> 데이터를 저장하고 남은공간 공백으로 채움
VARCHAR2    :   가변길이 문자열 -> 데이터를 저장하고 남은공간 삭제
이름(예약어 사용불가) USER_NAME(userName)   VARCHAR2 -> 15(한글 1글자당 3 BYTE -> 최대 5글자)
아이디    USER_ID                              VARCHAR2 -> 20(영어 + 숫자 20글자 이내)
나이      USER_AGE                             NUMBER
비밀번호  USER_PASS                            VARCHAR2 -> 30(영어 + 숫자 30글자 이내)
이메일    USER_EMAIL                           VARCHAR2 -> 50(영어 + 숫자 50글자 이내)
생년월일  USER_BIRTH                           CHAR, VARCHAR2, NUMBER, DATE
주소      USER_ADDR                            VARCHAR2 -> 30
전화번호  USER_PHONE                           CHAR -> 13 000 - 0000 - 0000 형태
-- 테이블 이름 : USER_INFO
-- 테이블 생성 구문
CREATE TABLE 테이블이름 (
    컬럼명 자료형(크기), 
    컬럼명 자료형(크기),
    ...
*/

CREATE TABLE USER_INFO(
    USER_NAME   VARCHAR2(15),
    USER_ID     VARCHAR2(20),
    USER_AGE    NUMBER,
    USER_PASS   VARCHAR2(20),
    USER_EMAIL  VARCHAR2(50),
    USER_BIRTH  DATE,
    USER_ADDR   VARCHAR2(300),
    USER_PHONE  CHAR(13)
);
SELECT * FROM USER_INFO;

COMMENT ON COLUMN USER_INFO.USER_NAME IS '회원 이름';
COMMENT ON COLUMN USER_INFO.USER_ID IS '회원 아이디';
COMMENT ON COLUMN USER_INFO.USER_AGE IS '나이';
COMMENT ON COLUMN USER_INFO.USER_PASS IS '비밀번호';
COMMENT ON COLUMN USER_INFO.USER_EMAIL IS '이메일';
COMMENT ON COLUMN USER_INFO.USER_BIRTH IS '생년월일';
COMMENT ON COLUMN USER_INFO.USER_ADDR IS '주소';
COMMENT ON COLUMN USER_INFO.USER_PHONE IS '전화번호';


INSERT INTO USER_INFO VALUES ('정민우1', 'user01', 30, '123456', 'user01@naver.com', to_date(19920808, 'yyyymmdd'),
                                '서울시 강서구 초록마을로', '010-8764-2440');
                                
INSERT INTO USER_INFO VALUES ('정민우2', 'user02', 20, '123456', 'user01@naver.com', to_date(20020809, 'yyyymmdd'),
                                '서울시 양천구 딴따라', '010-8764-2440');                

DELETE FROM USER_INFO WHERE USER_NAME = '정민우1';                               
                                
-- NOT NULL   -> 컬럼레벨설정만 가능
CREATE TABLE USER_NOTNULL(
    USER_ID VARCHAR(20) NOT NULL,
    USER_PW VARCHAR(30) NOT NULL,
    USER_NAME VARCHAR2(15),
    GENDER VARCHAR2(10)
);
INSERT INTO USER_NOTNULL VALUES('user01', '1234', '유저1', '남');
SELECT * FROM USER_NOTNULL;
INSERT INTO USER_NOTNULL VALUES('', '1234', '유저1', '남');

-- UNIQUE 
CREATE TABLE USER_UNIQUE1(
    USER_ID VARCHAR(20) UNIQUE,
    USER_PW VARCHAR(30) NOT NULL,
    USER_NAME VARCHAR2(15) UNIQUE,
    GENDER VARCHAR2(10)
);

INSERT INTO USER_UNIQUE1 VALUES('user01', '1234', '유저1', '남');
INSERT INTO USER_UNIQUE1 VALUES('user01', '1234', '유저2', '남');


-- UNIQUE + NOT NULL
CREATE TABLE USER_UNIQUE2(
    USER_ID VARCHAR(20) UNIQUE NOT NULL,
    USER_PW VARCHAR(30) NOT NULL,
    USER_NAME VARCHAR2(15) UNIQUE,
    GENDER VARCHAR2(10)
);
INSERT INTO USER_UNIQUE2 VALUES('', '1234', '유저1', '남');


-- 제약조건 위와 다른 설정방법, UNIQUE -> 테이블레벨
CREATE TABLE USER_UNIQUE3(
    USER_ID VARCHAR(20),
    USER_PW VARCHAR(30) NOT NULL,
    USER_NAME VARCHAR2(15),
    GENDER VARCHAR2(10),
    UNIQUE (USER_NAME)
);
INSERT INTO USER_UNIQUE3 VALUES('user01', '1234', '유저1', '남');
INSERT INTO USER_UNIQUE3 VALUES('user02', '1234', '유저1', '남');


CREATE TABLE USER_UNIQUE4(
    USER_ID VARCHAR(20),
    USER_PW VARCHAR(30) NOT NULL,
    USER_NAME VARCHAR2(15),
    GENDER VARCHAR2(10),
    UNIQUE (USER_ID, USER_NAME) -- USER_ID, USER_NAME 2개 조건이 모두 위배되면 제약조건 발동
);
INSERT INTO USER_UNIQUE4 VALUES('user01', '1234', '유저1', '남');
INSERT INTO USER_UNIQUE4 VALUES('user02', '1234', '유저1', '남');
INSERT INTO USER_UNIQUE4 VALUES('user01', '1234', '유저2', '남');
INSERT INTO USER_UNIQUE4 VALUES('user02', '1234', '유저2', '남'); -- 2개 조건이 동시에 위배되어 조건발동



-- PRIMARY KEY : UNIQUE + NOT NULL 동시에 만족 -> 한 테이블당 1개만 설정 가능
CREATE TABLE USER_PRIMARYKEY1(
    USER_ID VARCHAR(20)     PRIMARY KEY,    -- PRIMARY KEY 컬럼레벨
    USER_PW VARCHAR(30)     NOT NULL,
    USER_NAME VARCHAR2(15)  UNIQUE,
    GENDER VARCHAR2(10)
);
INSERT INTO USER_PRIMARYKEY1 VALUES('user01', '1234', '유저1', '남');
INSERT INTO USER_PRIMARYKEY1 VALUES('user01', '1234', '유저2', '남');


CREATE TABLE USER_PRIMARYKEY2(
    USER_ID VARCHAR(20),
    USER_PW VARCHAR(30)     NOT NULL,
    USER_NAME VARCHAR2(15)  UNIQUE,
    GENDER VARCHAR2(10),
    PRIMARY KEY(USER_ID)        -- PRIMARY KEY 테이블레벨
);
INSERT INTO USER_PRIMARYKEY2 VALUES('user01', '1234', '유저1', '남');
INSERT INTO USER_PRIMARYKEY2 VALUES('user01', '1234', '유저2', '남');


CREATE TABLE USER_PRIMARYKEY3(
    USER_ID VARCHAR(20),
    USER_PW VARCHAR(30)     NOT NULL,
    USER_NAME VARCHAR2(15)  UNIQUE,
    GENDER VARCHAR2(10),
    PRIMARY KEY(USER_ID, USER_PW)        -- PRIMARY KEY 테이블레벨   -> 두 컬럼을 합쳐서 PRIMARY KEY로 사용 -> 복합키
);
INSERT INTO USER_PRIMARYKEY3 VALUES('user01', '1234', '유저1', '남');
INSERT INTO USER_PRIMARYKEY3 VALUES('user01', '12345', '유저2', '남');
INSERT INTO USER_PRIMARYKEY3 VALUES('user01', '12345', '유저2', '남');
SELECT * FROM USER_PRIMARYKEY3;



--  CHECK

CREATE TABLE USER_CHECK(
    USER_ID VARCHAR(20)     PRIMARY KEY,
    USER_PW VARCHAR(30)     NOT NULL,
    USER_NAME VARCHAR2(15)  UNIQUE,
    GENDER CHAR(1)          CHECK(GENDER IN ('M', 'F'))       -- GEMDER 컬럼에 들어갈 수 있는 값은 M, F 두개만 가능
--    GENDER CHAR(1)          CHECK(GENDER IN ('M', 'F')) NOT NULL   -- NULL 값도 제약조건에 포함시킬때
);
INSERT INTO USER_CHECK VALUES('user01', '1234', '유저1', 'M');


--  DEFAULT : 기본값
CREATE TABLE TEST_TBL(
    BOARD_TITLE VARCHAR2(300),
    READ_COUNT NUMBER DEFAULT 0
);
INSERT INTO TEST_TBL VALUES ('제목2', 0);
INSERT INTO TEST_TBL (BOARD_TITLE) VALUES ('제목3');      --  값을 입력하지 않아도 자동으로 DEFAULT값이 대입됨. INSERT 문법이 조금 다름
SELECT * FROM TEST_TBL;





--  회원테이블 생성 -> 게시판 작성
CREATE TABLE USER_TBL1(
    USER_ID     VARCHAR(20)     PRIMARY KEY,
    USER_PW     VARCHAR(30)     NOT NULL,
    USER_NAME   VARCHAR2(15)    NOT NULL,
    NICKNAME    VARCHAR2(30)    UNIQUE
);
INSERT INTO USER_TBL1 VALUES ('user01', 'PASS01', '유저1', '테스트1');
INSERT INTO USER_TBL1 VALUES ('user02', 'PASS02', '유저2', '테스트2');
INSERT INTO USER_TBL1 VALUES ('user03', 'PASS03', '유저3', '테스트3');
SELECT * FROM USER_TBL1;

--  게시판 테이블 생성  ->  회원만 작성이 가능한 게시판
CREATE TABLE BOARD1(
    BOARD_NO        NUMBER          PRIMARY KEY,
    BOARD_TITLE     VARCHAR2(30)    NOT NULL,
    BOARD_CONTENT   VARCHAR2(100)   NOT NULL,
    BOARD_WRITER    VARCHAR2(20)    REFERENCES USER_TBL1(USER_ID),  --  USER_TBL1 테이블의 USER_ID 컬럼을 참조하는 컬럼
    REG_DATE        DATE
);
INSERT INTO BOARD1 VALUES('1', '제목1', '내용내용1', 'user01', SYSDATE);
INSERT INTO BOARD1 VALUES('2', '제목2', '내용내용2', 'user02', SYSDATE);
INSERT INTO BOARD1 VALUES('3', '제목3', '내용내용3', 'user03', SYSDATE);
INSERT INTO BOARD1 VALUES('4', '제목4', '내용내용4', 'user02', SYSDATE);
INSERT INTO BOARD1 VALUES('5', '제목5', '내용내용4', 'user00', SYSDATE);
SELECT * FROM BOARD1;


CREATE TABLE BOARD2(
    BOARD_NO        NUMBER          PRIMARY KEY,
    BOARD_TITLE     VARCHAR2(30)    NOT NULL,
    BOARD_CONTENT   VARCHAR2(100)   NOT NULL,
    BOARD_WRITER    VARCHAR2(20),    
    REG_DATE        DATE,
    FOREIGN KEY (BOARD_WRITER) REFERENCES USER_TBL1(USER_ID)    -- 테이블레벨
);
INSERT INTO BOARD2 VALUES('1', '제목1', '내용내용1', 'user05', SYSDATE);


CREATE TABLE BOARD3(
    BOARD_NO        NUMBER          PRIMARY KEY,
    BOARD_TITLE     VARCHAR2(30)    NOT NULL,
    BOARD_CONTENT   VARCHAR2(100)   NOT NULL,
    BOARD_WRITER    VARCHAR2(20)    REFERENCES USER_TBL1(NICKNAME), --  USER_TBL1 테이블의 NICKNAME 컬럼을 참조하는 컬럼
    REG_DATE        DATE
);
INSERT INTO BOARD3 VALUES('1', '제목1', '내용내용1', '테스트1', SYSDATE);
SELECT * FROM BOARD3;


CREATE TABLE BOARD4(
    BOARD_NO        NUMBER          PRIMARY KEY,
    BOARD_TITLE     VARCHAR2(30)    NOT NULL,
    BOARD_CONTENT   VARCHAR2(100)   NOT NULL,
    BOARD_WRITER    VARCHAR2(20)    REFERENCES USER_TBL1,    -- 컬럼을 생략하면 부모테이블의 PRIMARY KEY 컬럼이 자동으로 외래키 컬럼으로 설정
    REG_DATE        DATE
);
INSERT INTO BOARD4 VALUES('1', '제목1', '내용내용1', 'user01', SYSDATE);
SELECT * FROM BOARD4;

SELECT * FROM USER_CHECK;
DELETE FROM USER_CHECK WHERE USER_ID = 'user01';

DELETE FROM USER_TBL1 WHERE USER_ID = 'user01';     -- 따로 옵션을 지정해주지 않는다면, 외래키로 사용 중인 데이터는 삭제할 수 없다.



CREATE TABLE USER_TBL2(
    USER_ID     VARCHAR(20)     PRIMARY KEY,
    USER_PW     VARCHAR(30)     NOT NULL,
    USER_NAME   VARCHAR2(15)    NOT NULL,
    NICKNAME    VARCHAR2(30)    UNIQUE
);

CREATE TABLE BOARD11(
    BOARD_NO        NUMBER          PRIMARY KEY,
    BOARD_TITLE     VARCHAR2(30)    NOT NULL,
    BOARD_CONTENT   VARCHAR2(100)   NOT NULL,
    BOARD_WRITER    VARCHAR2(20)    REFERENCES USER_TBL2(USER_ID) ON DELETE SET NULL,       --  부모 데이터 삭제시 해당 부모데이터를 참조하는 자식데이터 값은 NULL 부여
    REG_DATE        DATE
);
INSERT INTO USER_TBL2 VALUES('user01', '1234', '유저01', '테스트1');
INSERT INTO USER_TBL2 VALUES('user02', '12345', '유저02', '테스트2');
INSERT INTO USER_TBL2 VALUES('user03', '1235', '유저03', '테스트3');
DELETE FROM USER_TBL2 WHERE USER_ID = 'user02';
SELECT * FROM USER_TBL2;
SELECT * FROM BOARD11;
INSERT INTO BOARD11 VALUES('1', '제목1', '내용1', 'user01', SYSDATE);
INSERT INTO BOARD11 VALUES('2', '제목2', '내용2', 'user02', SYSDATE);
INSERT INTO BOARD11 VALUES('3', '제목3', '내용3', 'user01', SYSDATE);
INSERT INTO BOARD11 VALUES('4', '제목4', '내용4', 'user02', SYSDATE);
INSERT INTO BOARD11 VALUES('5', '제목5', '내용5', 'user01', SYSDATE);


CREATE TABLE USER_TBL3(
    USER_ID     VARCHAR(20)     PRIMARY KEY,
    USER_PW     VARCHAR(30)     NOT NULL,
    USER_NAME   VARCHAR2(15)    NOT NULL,
    NICKNAME    VARCHAR2(30)    UNIQUE
);
SELECT * FROM USER_TBL3;
INSERT INTO USER_TBL3 VALUES('user01', '1234', '유저01', '테스트1');
INSERT INTO USER_TBL3 VALUES('user02', '12345', '유저02', '테스트2');
INSERT INTO USER_TBL3 VALUES('user03', '1235', '유저03', '테스트3');
DELETE FROM USER_TBL3 WHERE USER_ID = 'user02';

CREATE TABLE BOARD12(
    BOARD_NO        NUMBER          PRIMARY KEY,
    BOARD_TITLE     VARCHAR2(30)    NOT NULL,
    BOARD_CONTENT   VARCHAR2(100)   NOT NULL,
    BOARD_WRITER    VARCHAR2(20)    REFERENCES USER_TBL3(USER_ID) ON DELETE CASCADE,        --  부모 데이터 삭제시 해당 부모데이터를 참조하는 자식데이터 값도 전부 삭제
    REG_DATE        DATE
);
SELECT * FROM BOARD12;
INSERT INTO BOARD12 VALUES('1', '제목1', '내용1', 'user01', SYSDATE);
INSERT INTO BOARD12 VALUES('2', '제목2', '내용2', 'user02', SYSDATE);
INSERT INTO BOARD12 VALUES('3', '제목3', '내용3', 'user01', SYSDATE);
INSERT INTO BOARD12 VALUES('4', '제목4', '내용4', 'user02', SYSDATE);
INSERT INTO BOARD12 VALUES('5', '제목5', '내용5', 'user01', SYSDATE);

---------------------------------------------------------------------------------------------------------
--  쇼핑몰 (회원, 상품, 구매)

CREATE TABLE SHOP_MEMBER(
    USER_NO NUMBER          PRIMARY KEY,
    MEMBER_ID VARCHAR2(20)    UNIQUE,
    USER_PW VARCHAR2(30)    NOT NULL,
    USER_NAME VARCHAR2(30),
    GENDER CHAR(6),
    PHONE CHAR(11)
);
INSERT INTO SHOP_MEMBER VALUES (1, 'user01', 'pass01', '유저1', '남자', '01012345678');
INSERT INTO SHOP_MEMBER VALUES (2, 'user02', 'pass02', '유저2', '남자', '01012345678');
INSERT INTO SHOP_MEMBER VALUES (3, 'user03', 'pass03', '유저3', '남자', '01012345678');
SELECT * FROM SHOP_MEMBER;

--  상품테이블
CREATE TABLE PRODUCT(
    PRODUCT_NO      NUMBER          PRIMARY KEY,
    PRODUCT_NAME    VARCHAR2(100)   NOT NULL,
    PRODUCT_DETAIL  VARCHAR2(100)   NOT NULL,
    PRICE           NUMBER
);

INSERT INTO PRODUCT VALUES (1, '탁상용가습기', '물을 안넣어도 가습이됨', '100000');
INSERT INTO PRODUCT VALUES (2, '휴대용선풍기', '충전을 안해도 됨', '10000');
SELECT * FROM PRODUCT;

--  구매테이블(구매번호, 구매날짜, 수량, 총가격, 물품정보, 구매한 사람정보)
CREATE TABLE SHOP_BUY(
   BUY_NO       NUMBER          PRIMARY KEY,
   USER_ID      VARCHAR2(20)    REFERENCES SHOP_MEMBER(MEMBER_ID),
   PRODUCT_NO   NUMBER          REFERENCES PRODUCT(PRODUCT_NO),
   AMOUNT       NUMBER,
   BUY_DATE     DATE
);

-- user22 회원이 선풍기를 3개 구매
INSERT INTO SHOP_BUY VALUES(1, 'user02', 2, 3, SYSDATE);
SELECT * FROM SHOP_BUY;
SELECT USER_NAME, PRODUCT_NAME, PRICE, PRICE * AMOUNT 총합, BUY_DATE
FROM SHOP_BUY
JOIN SHOP_MEMBER ON (USER_ID = MEMBER_ID)
JOIN PRODUCT USING (PRODUCT_NO);


CREATE TABLE EMP_01(
    EMP_ID      NUMBER,
    EMP_NAME    VARCHAR2(30),
    DEPT_TITLE  VARCHAR2(20)
);
SELECT * FROM EMP_01;
INSERT INTO EMP_01 VALUES(100, '정민우1', NULL);
INSERT INTO EMP_01 VALUES(101, '정민우2', '교육부');
INSERT INTO EMP_01 (EMP_ID, EMP_NAME, DEPT_TITLE) VALUES(102, '정민우3', '기획부');
INSERT INTO EMP_01 (DEPT_TITLE, EMP_ID, EMP_NAME) VALUES('기획부', 103, '정민우4');
INSERT INTO EMP_01 VALUES(100, '정민우1', NULL);
INSERT INTO EMP_01 (EMP_NAME, EMP_ID) VALUES('이윤수5', 105);
INSERT INTO EMP_01 (EMP_NAME, EMP_ID) VALUES('정민우6', 107);


ALTER TABLE EMP_01
MODIFY DEPT_TITLE DEFAULT '비밀번호없음';

INSERT INTO EMP_01 (
    SELECT EMP_ID, EMP_NAME, DEPT_TITLE
    FROM EMPLOYEE
    LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
);


SELECT EMP_ID, EMP_NAME, DEPT_TITLE
FROM EMPLOYEE
LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID);



CREATE TABLE EMP_02
AS
SELECT EMP_ID, EMP_NAME, DEPT_CODE
FROM EMPLOYEE WHERE 1 = 0;

CREATE TABLE EMP_03
AS
SELECT EMP_ID, EMP_NAME, JOB_CODE
FROM EMPLOYEE WHERE 1 = 0;


SELECT * FROM EMP_02;
SELECT * FROM EMP_03;


SELECT EMP_ID, EMP_NAME, DEPT_CODE, JOB_CODE
FROM EMPLOYEE;

INSERT ALL
INTO EMP_02 VALUES(EMP_ID, EMP_NAME, DEPT_CODE)
INTO EMP_03 VALUES(EMP_ID, EMP_NAME, JOB_CODE)
SELECT EMP_ID, EMP_NAME, DEPT_CODE, JOB_CODE
FROM EMPLOYEE;


-----------------------------------------------------------------------------

CREATE TABLE EMP_COPY
AS
SELECT EMP_ID, EMP_NAME, DEPT_TITLE, JOB_NAME, SALARY
FROM EMPLOYEE
LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
LEFT JOIN JOB USING (JOB_CODE);
SELECT * FROM EMP_COPY;


--  UPDATE 테이블명 SET 변경컬럼 = 변경값, 변경컬럼 = 변경값 WHERE 조건식
UPDATE EMP_COPY SET SALARY = 2000000 WHERE EMP_NAME = '방명수';

--  방명수 사원의 직급을 주임으로 변경
UPDATE EMP_COPY SET JOB_NAME = '주임' WHERE EMP_NAME = '방명수';

SELECT * FROM EMP_COPY;

UPDATE EMP_COPY SET SALARY = 2500000, JOB_NAME = '대리', DEPT_TITLE = '회계관리부' WHERE EMP_NAME = '방명수';
COMMIT;

UPDATE EMP_COPY SET SALARY = 2000000, JOB_NAME = '대리', DEPT_TITLE = '회계관리부';
ROLLBACK;


--  방명수 직원을 유재식 직원의 월급과 동일한 월급으로 변경
--  1) 유재식 월급조회
SELECT SALARY FROM EMP_COPY WHERE EMP_NAME = '유재식';
--  2) 방명수 월급 변경
UPDATE EMP_COPY SET SALARY = (SELECT SALARY FROM EMP_COPY WHERE EMP_NAME = '유재식') WHERE EMP_NAME = '방명수';
SELECT * FROM EMP_COPY;

--  윤은해 직원의 급여를 10% 인상
UPDATE EMP_COPY SET SALARY = SALARY * 1.1 WHERE EMP_NAME = '윤은해';

COMMIT;

SELECT * FROM EMP_COPY ORDER BY SALARY DESC;


--  DELETE FROM 테이블명 WHERE 조건
DELETE FROM EMP_COPY WHERE EMP_ID = 200;
DELETE FROM EMP_COPY;

ROLLBACK;
SELECT * FROM EMP_COPY;

COMMIT;

------------------------------------------------------------------------------

CREATE TABLE USER_TBL(
    USER_NO     NUMBER          PRIMARY KEY,
    USER_NAME   VARCHAR2(20)    UNIQUE,
    USER_ADDR   VARCHAR2(100)
);
COMMIT;
INSERT INTO USER_TBL VALUES (1, '정민우1', '서울시 강서구');
INSERT INTO USER_TBL VALUES (2, '정민우2', '서울시 양천구');
INSERT INTO USER_TBL VALUES (3, '정민우3', '서울시 마포구');

INSERT INTO USER_TBL VALUES (4, '정민우4', '서울시 강남구');
SAVEPOINT TEST;
INSERT INTO USER_TBL VALUES (5, '정민우5', '서울시 중구');
ROLLBACK TO TEST;

SELECT * FROM USER_TBL;

COMMIT;
ROLLBACK;


CREATE TABLE DEL_USER(
    USER_NO     NUMBER          PRIMARY KEY,
    USER_NAME   VARCHAR2(20),
    USER_ADDR   VARCHAR2(100),
    DEL_DATE    DATE
);

DELETE FROM USER_TBL WHERE USER_NO = 5;
INSERT INTO DEL_USER VALUES (5, '정민우5', '서울시 중구', SYSDATE);
COMMIT;

SELECT * FROM USER_TBL;
SELECT * FROM DEL_USER;

DELETE FROM USER_TBL;           -- 테이블 데이터를 삭제,  다만 롤백하면 이전 데이터 복구 가능, DML 

TRUNCATE TABLE USER_TBL;        -- 테이블 데이터를 삭제 후 초기화, 롤백해도 이전 데이터 복구 불가능, DDL



CREATE VIEW EMP_VIEW
AS
SELECT EMP_NAME, EMAIL, PHONE FROM EMPLOYEE;

CREATE VIEW EMP_TEST
AS
SELECT EMP_NAME, EMAIL, PHONE FROM EMPLOYEE;

SELECT * FROM EMP_VIEW;
SELECT * FROM EMP_TEST;
SELECT * FROM EMPLOYEE;

UPDATE EMP_TEST SET PHONE = '01055556666' WHERE EMP_NAME = '임시환';
UPDATE EMP_VIEW SET PHONE = '01022222222' WHERE EMP_NAME = '유하진';


CREATE VIEW EMP_VIEW1
AS
SELECT EMP_NAME, DEPT_TITLE, JOB_NAME 
FROM EMPLOYEE
LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
LEFT JOIN JOB USING (JOB_CODE);

SELECT EMP_NAME, DEPT_TITLE, JOB_NAME 
FROM EMPLOYEE
LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
LEFT JOIN JOB USING (JOB_CODE);

SELECT * FROM EMP_VIEW1;

UPDATE EMP_VIEW1 SET JOB_NAME = '차장' WHERE EMP_NAME = '유하진';  -- VIEW는 JOIN된 상황에서의 수정은 제한적이다. 


CREATE OR REPLACE VIEW EMP_VIEW
AS
SELECT EMP_NAME, EMAIL, PHONE, DEPT_CODE FROM EMPLOYEE;





CREATE SEQUENCE TEST_SEQ      -- TEST_SEQ라는 시퀀스를 생성
START WITH 10                 -- 시퀀스의 시작번호는 10
INCREMENT BY 10               -- 10씩 증가
MAXVALUE 100                  -- 최대 100
NOCYCLE                       -- 최대값 도달 시 증가하지 않고 에러 발생
NOCACHE;
-- CURRVAL : 시퀀스의 현재값 반환
-- NEXTVAL : 현재 시퀀스의 다음값 반환
SELECT TEST_SEQ.NEXTVAL FROM DUAL;
SELECT TEST_SEQ.CURRVAL FROM DUAL;


CREATE SEQUENCE TEST_SEQ2    
START WITH 1                 
INCREMENT BY 1               
MAXVALUE 1000                  
NOCYCLE                       
NOCACHE;

SELECT TEST_SEQ2.NEXTVAL FROM DUAL;

CREATE TABLE SEQ_TEST(
    TEST_NO       NUMBER            PRIMARY KEY,
    DATA1         VARCHAR2(30)      NOT NULL,
    DATA2         VARCHAR2(40)      UNIQUE
);
INSERT  INTO SEQ_TEST VALUES (TEST_SEQ2.NEXTVAL, 'TEST1', 'TEST1');
INSERT  INTO SEQ_TEST VALUES (TEST_SEQ2.NEXTVAL, 'TEST2', 'TEST2');
INSERT  INTO SEQ_TEST VALUES (TEST_SEQ2.NEXTVAL, 'TEST3', 'TEST3');
INSERT  INTO SEQ_TEST VALUES (TEST_SEQ2.NEXTVAL, 'TEST' || TEST_SEQ2.CURRVAL, 'TEST3' || TEST_SEQ2.CURRVAL);
INSERT  INTO SEQ_TEST VALUES (TEST_SEQ2.NEXTVAL, 'TEST' || TEST_SEQ2.NEXTVAL, 'TEST3' || TEST_SEQ2.NEXTVAL);

SELECT * FROM SEQ_TEST;


CREATE SEQUENCE TEST_SEQ3    
START WITH 1                 
INCREMENT BY 1               
MAXVALUE 1000                  
NOCYCLE                       
NOCACHE;


-- 시퀀스 수정시 START WITH 값은 수정불가 -> 수정해야하는 경우  DROP 으로 삭제 후 다시 생성
ALTER SEQUENCE TEST_SEQ3
-- START WITH 1    -- 시작값은 못 바꾼다, 삭제하고 새로 만들어야함
INCREMENT BY 10               
MAXVALUE 10000                  
NOCYCLE                       
NOCACHE;


CREATE SEQUENCE TEST_SEQ4; -- 아래 입력데이터 생략가능, 1로 시작해서 1씩증가하는 시퀀스



CREATE TABLE KH_MEMBER(
    MEMBER_NO           NUMBER,
    MEMBER_NAME         VARCHAR2(20),
    MEMBER_AGE          NUMBER,
    MEMBER_JOIN_COM     NUMBER
);

CREATE SEQUENCE SEQ_NO  
START WITH 500                 
INCREMENT BY 10               
MAXVALUE 10000                  
NOCYCLE                       
NOCACHE;

CREATE SEQUENCE SEQ_JOIN_COM                
START WITH 1                 
INCREMENT BY 1  
MAXVALUE 10000                  
NOCYCLE                       
NOCACHE;

INSERT INTO KH_MEMBER VALUES (SEQ_NO.NEXTVAL, '홍길동', 20, SEQ_JOIN_COM.NEXTVAL);
INSERT INTO KH_MEMBER VALUES (SEQ_NO.NEXTVAL, '김말똥', 30, SEQ_JOIN_COM.NEXTVAL);
INSERT INTO KH_MEMBER VALUES (SEQ_NO.NEXTVAL, '삼식이', 40, SEQ_JOIN_COM.NEXTVAL);
INSERT INTO KH_MEMBER VALUES (SEQ_NO.NEXTVAL, '고길똥', 24, SEQ_JOIN_COM.NEXTVAL);

SELECT * FROM KH_MEMBER;


CREATE INDEX EMP_IND ON EMPLOYEE(EMP_NAME, EMP_NO, HIRE_DATE);
DROP INDEX EMP_IND;

SELECT EMP_NAME, EMP_NO, HIRE_DATE FROM EMPLOYEE;


CREATE SYNONYM EMP FOR EMPLOYEE;
CREATE SYNONYM DEPT FOR DEPARTMENT;

SELECT * FROM EMP;
SELECT * FROM DEPT;

SELECT EMP_NAME, DEPT_TITLE
FROM EMP
JOIN DEPT ON (DEPT_CODE = DEPT_ID);





